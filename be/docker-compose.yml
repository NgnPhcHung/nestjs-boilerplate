version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: template_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - pddata:/var/lib/postgresql/data
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    env_file:
      - ./.env
    healthcheck: # IMPORTANT: Ensure this is present and correct for Postgres
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME}
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      REDIS_HOST: ${REDIS_HOST} 
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    volumes:
      - redisdata:/data
    healthcheck: 
      test: ["CMD", "redis-cli", "--raw", "PING"]
      interval: 5s
      timeout: 5s
      retries: 5

  # backend:
  #   env_file:
  #     - ./.env
  #   build:
  #     context: .
  #     # dockerfile: Dockerfile
  #   container_name: ${BACKEND_CONTAINER_NAME}
  #   restart: unless-stopped
  #   environment:
  #     DATABASE_HOST: postgres
  #     DATABASE_PORT: ${DATABASE_PORT}
  #     DATABASE_USER: ${DATABASE_USER}
  #     DATABASE_PASSWORD: ${DATABASE_PASSWORD}
  #     DATABASE_NAME: ${DATABASE_NAME}
  #     REDIS_HOST: ${REDIS_HOST} # This should correctly resolve to 'redis'
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #     REDIS_DB: ${REDIS_DB}
  #   depends_on: # IMPORTANT: Use the dictionary syntax with 'condition: service_healthy'
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   ports:
  #     - '${APP_PORT}:${APP_PORT}'
    # If you still have a 'volumes: .:/app' line here, and your package.json isn't at the project root,
    # it could be causing problems with the application starting correctly *within* the container.
    # We addressed this in a previous discussion. For now, focus on the Redis connection.

volumes:
  pddata: {}
  redisdata: {}
